# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Static.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QTimer, QTime

#Класс в котором хранится информация об одном пользователе
class User:
    def __init__(self, nickname: str, user_id: int, start_work: str, end_work: str) -> None:
        self.nickname = nickname
        self.user_id = user_id
        self.action_history = []  # Массив для хранения истории действий
        self.action_timestamps = []
        self.start_work = start_work #"dd.MM.yyyy HH:mm:ss"
        self.end_work = end_work #"dd.MM.yyyy HH:mm:ss"


    def add_action(self, action, time):
        self.action_history.append(action)
        self.action_timestamps.append(time)

#Класс в котором хранится массив с информацией о пользователях
# class UserManager:
#     def __init__(self):
#         self.users = []  # Список пользователей

#     def add_user(self, user: User) -> None:
#         """Добавляет пользователя в список."""
#         self.users.append(user)
    
#     def get_user(self, _id):
#         for user in self.users:
#             if user.user_id == _id:
#                 return user
#         raise ValueError(f"Пользователя с id: {_id} нет!")

class Ui_StaticWindow(object):


    def setupUi(self, StaticWindow):
        StaticWindow.setObjectName("StaticWindow")
        StaticWindow.setWindowModality(QtCore.Qt.NonModal)
        StaticWindow.setFixedSize(StaticWindow.size())
        StaticWindow.resize(385, 198)
        self.centralwidget = QtWidgets.QWidget(StaticWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout_Oridinary = QtWidgets.QVBoxLayout()
        self.verticalLayout_Oridinary.setObjectName("verticalLayout_Oridinary")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout_Oridinary.addWidget(self.label)
        self.horizontalLayout_workarea = QtWidgets.QHBoxLayout()
        self.horizontalLayout_workarea.setObjectName("horizontalLayout_workarea")
        self.verticalLayout_UserChoose = QtWidgets.QVBoxLayout()
        self.verticalLayout_UserChoose.setObjectName("verticalLayout_UserChoose")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_UserChoose.addWidget(self.label_2)
        self.listWidget_Users = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_Users.setObjectName("listWidget_Users")
        item = QtWidgets.QListWidgetItem()
        self.listWidget_Users.addItem(item)
        # item = QtWidgets.QListWidgetItem()
        # self.listWidget_Users.addItem(item)
        # item = QtWidgets.QListWidgetItem()
        # self.listWidget_Users.addItem(item)
        # item = QtWidgets.QListWidgetItem()
        # self.listWidget_Users.addItem(item)
        # item = QtWidgets.QListWidgetItem()
        # self.listWidget_Users.addItem(item)
        self.verticalLayout_UserChoose.addWidget(self.listWidget_Users)
        self.horizontalLayout_workarea.addLayout(self.verticalLayout_UserChoose)
        self.verticalLayout_2half = QtWidgets.QVBoxLayout()
        self.verticalLayout_2half.setObjectName("verticalLayout_2half")
        self.gridLayout_1section = QtWidgets.QGridLayout()
        self.gridLayout_1section.setObjectName("gridLayout_1section")
        self.lineEdit_timework = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_timework.setReadOnly(True)
        self.lineEdit_timework.setObjectName("lineEdit_timework")
        self.gridLayout_1section.addWidget(self.lineEdit_timework, 2, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout_1section.addWidget(self.label_5, 1, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout_1section.addWidget(self.label_4, 1, 1, 1, 1)
        self.dateTimeEdit_Start = QtWidgets.QLineEdit(self.centralwidget)
        self.dateTimeEdit_Start.setReadOnly(True)
        self.dateTimeEdit_Start.setObjectName("dateTimeEdit_Start")
        self.gridLayout_1section.addWidget(self.dateTimeEdit_Start, 2, 0, 1, 1)
        self.dateTimeEdit_End = QtWidgets.QLineEdit(self.centralwidget)
        self.dateTimeEdit_End.setReadOnly(True)
        self.dateTimeEdit_End.setObjectName("dateTimeEdit_End")
        self.gridLayout_1section.addWidget(self.dateTimeEdit_End, 2, 2, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout_1section.addWidget(self.label_3, 1, 0, 1, 1)
        self.verticalLayout_2half.addLayout(self.gridLayout_1section)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2half.addWidget(self.label_6)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.verticalLayout_2half.addWidget(self.tableWidget)
        self.horizontalLayout_workarea.addLayout(self.verticalLayout_2half)
        self.verticalLayout_Oridinary.addLayout(self.horizontalLayout_workarea)
        self.gridLayout.addLayout(self.verticalLayout_Oridinary, 0, 0, 1, 1)
        StaticWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(StaticWindow)
        self.statusbar.setObjectName("statusbar")
        StaticWindow.setStatusBar(self.statusbar)

        #Таймер

        #Инициализируем переменные для секундомера
        self.running = False
        self.elapsed_time = QTime(0, 0)

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)

        self.retranslateUi(StaticWindow)

        QtCore.QMetaObject.connectSlotsByName(StaticWindow)

        self.listWidget_Users.itemClicked.connect(self.user_list)

        self.start()



    def retranslateUi(self, StaticWindow):
        _translate = QtCore.QCoreApplication.translate
        StaticWindow.setWindowTitle(_translate("StaticWindow", "Статистика"))
        self.label.setText(_translate("StaticWindow", "Статистика"))
        self.label_2.setText(_translate("StaticWindow", "Пользователь"))
        __sortingEnabled = self.listWidget_Users.isSortingEnabled()
        self.listWidget_Users.setSortingEnabled(False)
        item = self.listWidget_Users.item(0)
        item.setText(_translate("StaticWindow", "User1"))

        '''
        item = self.listWidget_Users.item(1)
        item.setText(_translate("StaticWindow", "User2"))
        item = self.listWidget_Users.item(2)
        item.setText(_translate("StaticWindow", "User3"))
        item = self.listWidget_Users.item(3)
        item.setText(_translate("StaticWindow", "User4"))
        item = self.listWidget_Users.item(4)
        item.setText(_translate("StaticWindow", "User5"))
        '''

        self.listWidget_Users.setSortingEnabled(__sortingEnabled)
        self.lineEdit_timework.setInputMask(_translate("StaticWindow", "00:00:00"))
        self.lineEdit_timework.setText(_translate("StaticWindow", "00:00:00"))
        self.dateTimeEdit_Start.setInputMask(_translate("StaticWindow", "00.00.0000 00:00:00"))
        self.dateTimeEdit_Start.setText(_translate("StaticWindow", "00.00.0000 00:00:00"))
        self.dateTimeEdit_End.setInputMask(_translate("StaticWindow", "00.00.0000 00:00:00"))
        self.dateTimeEdit_End.setText(_translate("StaticWindow", "00.00.0000 00:00:00"))
        self.label_5.setText(_translate("StaticWindow", "Конец работы"))
        self.label_4.setText(_translate("StaticWindow", "Время работы"))
        self.label_3.setText(_translate("StaticWindow", "Начало работы"))
        self.label_6.setText(_translate("StaticWindow", "История действий"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("StaticWindow", "Время"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("StaticWindow", "Действие"))


    def user_list(self, item):
            pass
            # self.tableWidget.clearContents()
            # userRow = self.listWidget_Users.row(item)
            # #Массив данных о пользователях
            # user_manager = UserManager()
            # user_manager.add_user(User(nickname="User1", user_id=0, start_work="27.04.2024 09:33", end_work="28.04.2024 01:22"))
            # user_manager.users[0].add_action("Создана диаграма 'Оплата заказа'", "27.04.2024 09:33")
            # user_manager.users[0].add_action("Добавил объект 'Активное состояние'", "27.04.2024 12:45")
            # if userRow == 0:
            #     self.tableWidget.setRowCount(0)
            #     self.reset()
            #     #self.dateTimeEdit_Start.setDisplayFormat("12.12.2023 23:12:05")
            #     self.start()
            #     row_count = len(user_manager.users[0].action_history)
            #     self.tableWidget.insertRow(row_count)
            #     for i in range(row_count):
            #         self.tableWidget.insertRow(i)

            # #self.tableWidget.setItem(0,0, QTableWidgetItem(str(user_manager.users[0].action_timestamps[0])))
            #     self.tableWidget.setItem(0,0, QTableWidgetItem(user_manager.users[0].action_timestamps[0]))
            #     self.tableWidget.setItem(0,1, QTableWidgetItem(user_manager.users[0].action_history[0]))
            #     self.tableWidget.setItem(1,0, QTableWidgetItem(user_manager.users[0].action_timestamps[1]))
            #     self.tableWidget.setItem(1,1, QTableWidgetItem(user_manager.users[0].action_history[1]))
            


    #Ниже 4 функции - реализация работы таймера

    def start(self):
        if not self.running:  # Запускаем таймер, только если он не запущен
            self.running = True
            self.timer.start(1000)  # Интервал 1000 мс (1 секунда)

    def stop(self):
        if self.running:  # Останавливаем таймер
            self.running = False
            self.timer.stop()

    def reset(self):
        self.elapsed_time = QTime(0, 0)  # Сбрасываем время
        self.lineEdit_timework.setText(self.elapsed_time.toString("hh:mm:ss"))  # Отображаем сброшенное время

    def update_time(self):
        self.elapsed_time = self.elapsed_time.addSecs(1)  # Увеличиваем время на 1 секунду
        self.lineEdit_timework.setText(self.elapsed_time.toString("hh:mm:ss"))  # Обновляем отображение времени
        self.dateTimeEdit_End.setText(self.elapsed_time.toString("00.00.0000 hh:mm:ss"))


if __name__ == "__main__":
    import sys

    # users = UserManager()
    # users.add_user(
    #     User(
    #         nickname="User1",
    #         user_id=0,
    #         start_work="dhdasd",
    #         end_work="sdgsd"
    #     )
    # )
    # user = users.get_user(0)
    # print(user.nickname)
    
    app = QtWidgets.QApplication(sys.argv)
    StaticWindow = QtWidgets.QMainWindow()
    ui = Ui_StaticWindow()
    ui.setupUi(StaticWindow)
    #ui.user_list()
    StaticWindow.show()
    sys.exit(app.exec_())
    # users = UserManager()
    # users.add_user(
        # User(
    #         nickname="User1",
    #         user_id=0,
    #         start_work="dhdasd",
    #         end_work="sdgsd"
    #     )
    # )
    # user = users.get_user(0)
    # print(user.nickname)
    